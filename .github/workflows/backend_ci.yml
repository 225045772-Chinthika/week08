# week08/.github/workflows/backend_ci.yml
name: Backend CI - Test, Build and Push Images to ACR

on:
  workflow_dispatch:

  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend_ci.yml'
      - '.github/workflows/backend-cd.yml'

  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - '.github/workflows/backend_ci.yml'

concurrency:
  group: backend-ci-${{ github.ref }}
  cancel-in-progress: true

env:
  ACR_NAME: ${{ secrets.ACR_NAME }}                  # e.g., w09acr
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}  # e.g., w09acr.azurecr.io
  IMAGE_TAG: ${{ github.sha }}-${{ github.run_id }}

jobs:
  test_and_lint_backends:
    runs-on: ubuntu-latest

    services:
      product_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      order_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          for req in backend/*/requirements.txt; do
            echo "Installing $req"
            pip install -r "$req"
          done
          pip install pytest httpx

      - name: Run product_service tests
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

      - name: Run order_service tests
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

  build_and_push_images:
    name: build_and_push_images (${{ matrix.service }})
    runs-on: ubuntu-latest
    needs: test_and_lint_backends
    strategy:
      fail-fast: false
      matrix:
        service: [product_service, order_service]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # PRs: produce a green context without pushing images
      - name: PR mode - skip image publish
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          echo "PR build for ${{ matrix.service }}: skipping ACR publish"

      # Push to main: publish images
      - name: Azure Login
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to Azure Container Registry
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: az acr login --name ${{ env.ACR_NAME }}

      - name: Build and Push ${{ matrix.service }} Image
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          IMAGE_NAME=${{ env.ACR_LOGIN_SERVER }}/${{ matrix.service }}:${{ env.IMAGE_TAG }}
          docker build -t "$IMAGE_NAME" "backend/${{ matrix.service }}"
          docker push "$IMAGE_NAME"

      - name: Logout from Azure
        if: ${{ always() && github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        run: az logout
