name: CD - Deploy Backend Services to AKS

on:
  push:
    branches: 
      - main
      - dev  # deploy automatically on dev and main
 
  workflow_dispatch:
    inputs:
      aks_cluster_name:
        description: 'Name of the AKS Cluster to deploy to'
        required: true
        default: 'w09-aks'
      aks_resource_group:
        description: 'Resource Group of the AKS Cluster'
        required: true
        default: 'w09-rg'
      aks_acr_name:
        description: 'Name of ACR'
        required: true
        default: 'w09acr'

# Defaults used for push events (workflow_dispatch will still use its inputs)
env:
  AKS_CLUSTER_NAME: w09-aks
  AKS_RESOURCE_GROUP: w09-rg
  AKS_ACR_NAME: w09acr

jobs:
  deploy_backend:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'Production' || 'development' }}
    
    outputs:
      PRODUCT_API_IP: ${{ steps.get_product_ip.outputs.external_ip }}
      ORDER_API_IP: ${{ steps.get_order_ip.outputs.external_ip }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
 
      # Resolve AKS/ACR values depending on event type
      - name: Resolve deployment inputs
        id: cfg
        run: |
          # If workflow_dispatch: use typed inputs; else use env defaults
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "aks_cluster=${{ github.event.inputs.aks_cluster_name }}" >> $GITHUB_OUTPUT
            echo "aks_rg=${{ github.event.inputs.aks_resource_group }}" >> $GITHUB_OUTPUT
            echo "aks_acr=${{ github.event.inputs.aks_acr_name }}" >> $GITHUB_OUTPUT
          else
            echo "aks_cluster=${{ env.AKS_CLUSTER_NAME }}" >> $GITHUB_OUTPUT
            echo "aks_rg=${{ env.AKS_RESOURCE_GROUP }}" >> $GITHUB_OUTPUT
            echo "aks_acr=${{ env.AKS_ACR_NAME }}" >> $GITHUB_OUTPUT
          fi

      # Choose namespace by branch: dev -> dev, main -> prod
      - name: Set target namespace
        id: ns
        run: |
          if [ "${GITHUB_REF##*/}" = "main" ]; then
            echo "namespace=prod" >> $GITHUB_OUTPUT
          else
            echo "namespace=dev" >> $GITHUB_OUTPUT
          fi
  
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Ensure correct subscription
        run: |
          az account set --subscription fa0f3ccf-998f-45e8-97bd-90ac9c41fba3
          echo "Using subscription:"
          az account show --query "{name:name, id:id}" -o table

      - name: Resolve ACR resource ID
        id: acr
        run: |
          set -e
          ACR_ID=$(az acr show -n "${{ steps.cfg.outputs.aks_acr }}" --query id -o tsv || true)
          if [ -z "$ACR_ID" ]; then
            echo "found=no" >> $GITHUB_OUTPUT
            echo "ACR not found: ${{ steps.cfg.outputs.aks_acr }} â€” will skip attach."
          else
            echo "found=yes" >> $GITHUB_OUTPUT
            echo "id=$ACR_ID" >> $GITHUB_OUTPUT
            echo "Resolved ACR ID: $ACR_ID"
          fi

      - name: Attach ACR (if found)
        if: steps.acr.outputs.found == 'yes'
        run: |
          az aks update \
            --name "${{ steps.cfg.outputs.aks_cluster }}" \
            --resource-group "${{ steps.cfg.outputs.aks_rg }}" \
            --attach-acr "${{ steps.acr.outputs.id }}"

      - name: Set Kubernetes context (get AKS credentials)
        run: |
          az aks get-credentials --resource-group "${{ steps.cfg.outputs.aks_rg }}" --name "${{ steps.cfg.outputs.aks_cluster }}" --overwrite-existing

      - name: Attach ACR
        run: |
          az aks update --name "${{ steps.cfg.outputs.aks_cluster }}" --resource-group "${{ steps.cfg.outputs.aks_rg }}" --attach-acr "${{ steps.cfg.outputs.aks_acr }}"

      - name: Create namespace if missing
        run: |
          kubectl get ns "${{ steps.ns.outputs.namespace }}" || \
          kubectl create ns "${{ steps.ns.outputs.namespace }}"
 
      - name: Deploy Backend Infrastructure (Namespace, ConfigMaps, Secrets, Databases)
        run: |
          echo "Deploying backend infrastructure..."
          kubectl apply -f k8s/configmaps.yaml -n "${{ steps.ns.outputs.namespace }}"
          kubectl apply -f k8s/secrets.yaml    -n "${{ steps.ns.outputs.namespace }}"
          kubectl apply -f k8s/product-db.yaml -n "${{ steps.ns.outputs.namespace }}"
          kubectl apply -f k8s/order-db.yaml   -n "${{ steps.ns.outputs.namespace }}"

      - name: Deploy Backend Microservices (Product, Order)
        run: |
          echo "Deploying backend microservices..."
          kubectl apply -f k8s/product-service.yaml -n "${{ steps.ns.outputs.namespace }}"
          kubectl apply -f k8s/order-service.yaml   -n "${{ steps.ns.outputs.namespace }}"
      
      - name: Wait for Backend LoadBalancer IPs
        run: |
          echo "Waiting for Product, Order LoadBalancer IPs to be assigned (up to 5 minutes)..."
          PRODUCT_IP=""
          ORDER_IP=""
          
          for i in $(seq 1 60); do
            echo "Attempt $i/60 to get IPs..."
            PRODUCT_IP=$(kubectl get service product-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            ORDER_IP=$(kubectl get service order-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}')

            if [[ -n "$PRODUCT_IP" && -n "$ORDER_IP" ]]; then
              echo "All backend LoadBalancer IPs assigned!"
              echo "Product Service IP: $PRODUCT_IP"
              echo "Order Service IP: $ORDER_IP"
              break
            fi
            sleep 5 # Wait 5 seconds before next attempt
          done
          
          if [[ -z "$PRODUCT_IP" || -z "$ORDER_IP" ]]; then
            echo "Error: One or more LoadBalancer IPs not assigned after timeout."
            exit 1 # Fail the job if IPs are not obtained
          fi
          
          # These are environment variables for subsequent steps in the *same job*
          # And used to set the job outputs
          echo "PRODUCT_IP=$PRODUCT_IP" >> $GITHUB_ENV
          echo "ORDER_IP=$ORDER_IP" >> $GITHUB_ENV

      - name: Capture Product Service IP for Workflow Output
        id: get_product_ip
        run: echo "external_ip=${{ env.PRODUCT_IP }}" >> $GITHUB_OUTPUT
      
      - name: Capture Order Service IP for Workflow Output
        id: get_order_ip
        run: echo "external_ip=${{ env.ORDER_IP }}" >> $GITHUB_OUTPUT

      - name: Logout from Azure
        run: az logout
